# Docker Compose for AI Agents Development & Production
version: '3.8'

services:
  # Main AI Agent Application
  ai-agent:
    build: 
      context: ../..
      dockerfile: 05-deployment/docker/Dockerfile
    container_name: ai-agent-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://agent_user:agent_pass@postgres:5432/agents_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    env_file:
      - ../../.env
    volumes:
      - agent_logs:/app/logs
      - agent_outputs:/app/outputs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-agents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-agent-postgres
    environment:
      POSTGRES_USER: agent_user
      POSTGRES_PASSWORD: agent_pass
      POSTGRES_DB: agents_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ai-agents-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_user -d agents_db"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-agent-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ai-agents-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-agent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - ai-agents-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-agent-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/agents-dashboard.json
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - ai-agents-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: ai-agent-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ai-agent
    restart: unless-stopped
    networks:
      - ai-agents-network
    profiles:
      - production

# Named volumes for persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  agent_logs:
    driver: local
  agent_outputs:
    driver: local

# Network for service communication
networks:
  ai-agents-network:
    driver: bridge