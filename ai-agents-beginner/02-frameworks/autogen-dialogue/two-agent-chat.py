#!/usr/bin/env python3
"""
AutoGen - Conversations Multi-Agents
D√©monstration de dialogues naturels entre agents sp√©cialis√©s
"""

import os
from typing import Dict, List, Any, Optional
from dotenv import load_dotenv

# Dependencies: pip install autogen-agentchat
from autogen import ConversableAgent, GroupChat, GroupChatManager

load_dotenv()

class AutoGenDemo:
    """D√©monstration des conversations AutoGen"""
    
    def __init__(self):
        # Configuration LLM pour AutoGen
        self.llm_config = {
            "model": "gpt-4",
            "api_key": os.getenv("OPENAI_API_KEY"),
            "temperature": 0.7
        }
        
        print("ü§ñ AutoGen Demo initialis√©")
    
    def demo_simple_dialogue(self):
        """Dialogue simple entre 2 agents"""
        print("\nüí¨ DEMO 1: Dialogue Simple (Expert + Assistant)")
        print("=" * 50)
        
        # Agent Expert
        expert = ConversableAgent(
            name="AI_Expert",
            system_message="""
            Tu es un expert en agents IA avec 10 ans d'exp√©rience.
            Tu donnes des conseils techniques pr√©cis et pratiques.
            Tu poses des questions pertinentes pour clarifier les besoins.
            R√©ponds de mani√®re concise et actionnable.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER",
            max_consecutive_auto_reply=3
        )
        
        # Agent Assistant/Questionneur
        assistant = ConversableAgent(
            name="Curious_Developer",
            system_message="""
            Tu es un d√©veloppeur curieux qui apprend les agents IA.
            Tu poses des questions pratiques et demandes des exemples concrets.
            Tu creuses les sujets pour vraiment comprendre.
            Tu valides ta compr√©hension en reformulant.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER",
            max_consecutive_auto_reply=3
        )
        
        # Lancer la conversation
        print("\nüöÄ Lancement du dialogue...")
        
        # L'assistant initie avec une question
        result = assistant.initiate_chat(
            expert,
            message="""
            Salut ! Je d√©veloppe ma premi√®re application avec des agents IA.
            J'h√©site entre LangChain, CrewAI et AutoGen. 
            Peux-tu m'expliquer les principales diff√©rences et quand utiliser chacun ?
            """,
            max_turns=6
        )
        
        return result
    
    def demo_group_brainstorm(self):
        """Brainstorming en groupe avec 4 agents"""
        print("\nüß† DEMO 2: Brainstorming de Groupe (4 Agents)")
        print("=" * 50)
        
        # Agent Product Manager
        product_manager = ConversableAgent(
            name="Product_Manager",
            system_message="""
            Tu es un Product Manager exp√©riment√© dans l'IA.
            Tu penses business value, user experience, et faisabilit√©.
            Tu poses les bonnes questions produit et priorises les features.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Agent Tech Lead
        tech_lead = ConversableAgent(
            name="Tech_Lead", 
            system_message="""
            Tu es Tech Lead avec expertise en agents IA.
            Tu √©values la faisabilit√© technique et l'architecture.
            Tu identifies les risques et propose des solutions robustes.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Agent UX Designer
        ux_designer = ConversableAgent(
            name="UX_Designer",
            system_message="""
            Tu es UX Designer sp√©cialis√© dans les interfaces IA.
            Tu penses user journey, accessibilit√©, et simplicit√©.
            Tu proposes des solutions centr√©es utilisateur.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Agent Data Scientist
        data_scientist = ConversableAgent(
            name="Data_Scientist",
            system_message="""
            Tu es Data Scientist expert en ML/IA.
            Tu √©values les besoins en donn√©es, mod√®les, et m√©triques.
            Tu anticipes les challenges li√©s √† la performance des mod√®les.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Cr√©er le groupe de discussion
        group_chat = GroupChat(
            agents=[product_manager, tech_lead, ux_designer, data_scientist],
            messages=[],
            max_round=12,  # Nombre maximum de tours
            speaker_selection_method="auto"  # S√©lection automatique du speaker
        )
        
        # Manager du groupe
        manager = GroupChatManager(
            groupchat=group_chat,
            llm_config=self.llm_config,
            system_message="""
            Tu coordonnes la discussion de brainstorming.
            Assure-toi que chaque perspective (produit, tech, UX, data) est entendue.
            Guide vers une solution √©quilibr√©e et r√©alisable.
            """
        )
        
        print("\nüöÄ Lancement du brainstorming...")
        
        # Initier le brainstorming
        result = product_manager.initiate_chat(
            manager,
            message="""
            üéØ BRAINSTORMING SESSION: Customer Service AI Agent
            
            Nous voulons cr√©er un agent IA pour le support client qui:
            - R√©sout 70% des tickets automatiquement
            - S'int√®gre avec notre CRM existant
            - Escalade intelligemment vers les humains
            - Apprend des interactions pass√©es
            
            Budget: 6 mois, √©quipe de 4 devs.
            
            Chacun, donnez votre perspective et vos recommandations!
            """,
            max_turns=12
        )
        
        return result
    
    def demo_code_review(self):
        """Session de code review collaborative"""
        print("\nüë®‚Äçüíª DEMO 3: Code Review Collaborative")
        print("=" * 50)
        
        # Agent Senior Developer
        senior_dev = ConversableAgent(
            name="Senior_Developer",
            system_message="""
            Tu es un Senior Developer avec expertise en Python et agents IA.
            Tu reviews le code pour: performance, s√©curit√©, maintenabilit√©.
            Tu donnes des suggestions constructives avec des exemples.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Agent Security Specialist  
        security_expert = ConversableAgent(
            name="Security_Expert",
            system_message="""
            Tu es expert en s√©curit√© des applications IA.
            Tu identifies les vuln√©rabilit√©s, les fuites de donn√©es potentielles.
            Tu proposes des am√©liorations s√©curis√©es.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Agent Performance Specialist
        performance_expert = ConversableAgent(
            name="Performance_Expert", 
            system_message="""
            Tu es sp√©cialis√© dans l'optimisation des performances.
            Tu identifies les bottlenecks, probl√®mes de scalabilit√©.
            Tu proposes des optimisations concr√®tes.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        # Groupe de code review
        code_review_group = GroupChat(
            agents=[senior_dev, security_expert, performance_expert],
            messages=[],
            max_round=10,
            speaker_selection_method="round_robin"  # Chacun son tour
        )
        
        code_review_manager = GroupChatManager(
            groupchat=code_review_group,
            llm_config=self.llm_config
        )
        
        # Code √† reviewer (exemple realistic)
        code_to_review = '''
class AIAgent:
    def __init__(self, api_key):
        self.api_key = api_key  # Stored in plain text
        self.client = OpenAI(api_key=api_key)
        self.chat_history = []  # Unlimited growth
    
    def process_request(self, user_input):
        # No input validation
        self.chat_history.append(user_input)
        
        # Synchronous call - blocks everything
        response = self.client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": user_input}],
            timeout=None  # No timeout
        )
        
        result = response.choices[0].message.content
        self.chat_history.append(result)
        
        # Log everything including sensitive data
        print(f"User: {user_input}, API Key: {self.api_key}, Response: {result}")
        
        return result
    
    def get_history(self):
        return self.chat_history  # No access control
        '''
        
        print("\nüöÄ Lancement du code review...")
        
        result = senior_dev.initiate_chat(
            code_review_manager,
            message=f"""
            üìã CODE REVIEW REQUEST
            
            Voici un code d'agent IA √† reviewer:
            
            ```python
            {code_to_review}
            ```
            
            Chaque expert, donnez votre analyse:
            - Points probl√©matiques
            - Suggestions d'am√©lioration  
            - Code alternatif si n√©cessaire
            
            Focus sur la production-readiness!
            """,
            max_turns=10
        )
        
        return result
    
    def demo_human_in_loop(self):
        """D√©monstration avec intervention humaine"""
        print("\nüë§ DEMO 4: Human-in-the-Loop")
        print("=" * 50)
        
        # Agent qui peut demander validation humaine
        consultant = ConversableAgent(
            name="AI_Consultant",
            system_message="""
            Tu es consultant en agents IA. 
            Pour les d√©cisions importantes, tu demandes validation humaine.
            Tu pr√©sentes clairement les options et leurs implications.
            """,
            llm_config=self.llm_config,
            human_input_mode="ALWAYS",  # Intervention humaine activ√©e
            max_consecutive_auto_reply=2
        )
        
        # Agent client
        client = ConversableAgent(
            name="Business_Client",
            system_message="""
            Tu repr√©sentes une entreprise qui veut impl√©menter des agents IA.
            Tu poses des questions business et veux des recommandations claires.
            """,
            llm_config=self.llm_config,
            human_input_mode="NEVER"
        )
        
        print("üí° Dans cette d√©mo, le consultant demandera votre avis!")
        print("   Tapez vos r√©ponses quand demand√©, 'exit' pour terminer\n")
        
        try:
            result = client.initiate_chat(
                consultant,
                message="""
                Nous sommes une entreprise de 200 employ√©s dans la logistique.
                Nous voulons automatiser notre support client avec des agents IA.
                
                Questions:
                1. Par o√π commencer?
                2. Quel budget pr√©voir?
                3. Quels risques anticiper?
                4. Timeline r√©aliste?
                
                Nous avons besoin de recommandations concr√®tes!
                """,
                max_turns=8
            )
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Session human-in-the-loop interrompue")
            result = None
        
        return result


def main():
    """D√©monstration compl√®te AutoGen"""
    
    print("ü§ñ AutoGen Multi-Agent Conversations Demo")
    print("=" * 60)
    
    # V√©rifier les pr√©requis
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY manquante!")
        print("   Ajoutez votre cl√© dans le fichier .env")
        return
    
    demo = AutoGenDemo()
    
    try:
        print("üéØ Choisissez une d√©mo:")
        print("1. Dialogue Simple (2 agents)")
        print("2. Brainstorming de Groupe (4 agents)")
        print("3. Code Review Collaboratif (3 experts)")
        print("4. Human-in-the-Loop (avec interaction)")
        print("5. Toutes les d√©mos (sauf human-in-loop)")
        
        choice = input("\nüìù Votre choix (1-5): ").strip()
        
        if choice == "1":
            demo.demo_simple_dialogue()
        elif choice == "2":
            demo.demo_group_brainstorm()
        elif choice == "3":
            demo.demo_code_review()
        elif choice == "4":
            demo.demo_human_in_loop()
        elif choice == "5":
            demo.demo_simple_dialogue()
            print("\n" + "="*60)
            demo.demo_group_brainstorm()
            print("\n" + "="*60)
            demo.demo_code_review()
        else:
            print("‚ùå Choix invalide, lancement dialogue simple par d√©faut")
            demo.demo_simple_dialogue()
        
        print(f"\nüéâ D√©monstrations AutoGen termin√©es!")
        print(f"\nüí° Points cl√©s AutoGen:")
        print(f"   ‚úÖ Conversations naturelles entre agents")
        print(f"   ‚úÖ Gestion automatique des tours de parole")
        print(f"   ‚úÖ GroupChat pour discussions multi-agents")
        print(f"   ‚úÖ Human-in-the-loop pour validation")
        print(f"   ‚úÖ Orchestration flexible et adaptable")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è D√©mo interrompue par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur pendant la d√©mo: {e}")


if __name__ == "__main__":
    main()