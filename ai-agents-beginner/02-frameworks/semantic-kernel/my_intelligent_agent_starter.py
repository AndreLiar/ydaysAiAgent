#!/usr/bin/env python3
"""
üéØ PROJET INTELLIGENT AGENT - STARTER TEMPLATE
Apprenez Semantic Kernel en construisant un agent intelligent avec m√©moire !

üìö Ce fichier est votre template de d√©marrage. Suivez les TODO pour apprendre.
üöÄ √Ä la fin, vous aurez un assistant personnel avec planification et m√©moire long-terme.

Temps estim√©: 15 minutes
Difficult√©: ‚≠ê‚≠ê‚≠ê (Interm√©diaire)
"""

import os
from typing import Dict, List, Any, Optional
from datetime import datetime
from dataclasses import dataclass
import json
from pathlib import Path

# TODO 1: Installer les d√©pendances
# pip install semantic-kernel openai python-dotenv

# TODO 2: Importer les modules n√©cessaires
# üí° APPRENTISSAGE: Comprendre l'√©cosyst√®me Semantic Kernel
from dotenv import load_dotenv
# Ajouter vos imports ici:
# import semantic_kernel as sk
# from semantic_kernel.connectors.ai.open_ai import OpenAIChatCompletion
# from semantic_kernel.planning import BasicPlanner
# from semantic_kernel.memory import SemanticTextMemory
# from semantic_kernel.connectors.ai.open_ai import OpenAITextEmbedding

load_dotenv()

# TODO 3: D√©finir l'√©tat de l'agent intelligent
# üí° APPRENTISSAGE: M√©moire et pr√©f√©rences utilisateur
@dataclass
class AgentState:
    """√âtat persistant de l'agent intelligent"""
    # D√©finir les champs d'√©tat ici
    pass

# TODO 4: Cr√©er le syst√®me de plugins
# üí° APPRENTISSAGE: Extensibilit√© avec plugins
class PluginRegistry:
    """Registre de plugins personnalis√©s"""
    
    def __init__(self):
        # TODO: Initialiser le registre
        pass
    
    def create_time_plugin(self):
        """Plugin pour gestion du temps"""
        # TODO: Impl√©menter le plugin temps
        pass
    
    def create_preference_plugin(self):
        """Plugin pour gestion des pr√©f√©rences"""
        # TODO: Impl√©menter le plugin pr√©f√©rences
        pass

class IntelligentAgentSystem:
    """
    üéØ VOTRE AGENT INTELLIGENT COMPLET
    
    Objectifs d'apprentissage:
    1. üî∑ Ma√Ætriser les concepts Semantic Kernel
    2. üîå Cr√©er et int√©grer des plugins personnalis√©s
    3. üß† Impl√©menter une m√©moire persistante
    4. üìã Utiliser la planification automatique
    5. üéØ Construire un assistant adaptatif
    """
    
    def __init__(self):
        """
        TODO 5: Initialiser votre agent intelligent
        üí° APPRENTISSAGE: Configuration Semantic Kernel
        
        √Ä faire:
        - Cr√©er le kernel principal
        - Configurer les services AI
        - Initialiser la m√©moire s√©mantique
        - Pr√©parer le syst√®me de plugins
        """
        print("üöÄ Initialisation de votre agent intelligent...")
        
        # V√©rifier la cl√© API
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("‚ùå OPENAI_API_KEY non trouv√©e ! Cr√©ez un fichier .env")
        
        # TODO: Cr√©er le kernel Semantic Kernel
        # self.kernel = sk.Kernel()
        
        # TODO: Configurer le service AI
        # self.kernel.add_text_completion_service(
        #     "gpt-4",
        #     OpenAIChatCompletion("gpt-4", api_key)
        # )
        
        # TODO: Configurer les embeddings pour la m√©moire
        # self.kernel.add_text_embedding_generation_service(
        #     "text-embedding-ada-002",
        #     OpenAITextEmbedding("text-embedding-ada-002", api_key)
        # )
        
        # TODO: Initialiser la m√©moire s√©mantique
        # self.kernel.register_memory_store(SemanticTextMemory())
        
        # TODO: Initialiser vos variables d'instance
        # self.plugins = PluginRegistry()
        # self.planner = None
        # self.agent_state = AgentState()
        # self.conversation_history = []
        
        print("‚úÖ Configuration de base termin√©e")
    
    def create_custom_plugins(self):
        """
        TODO 6: Cr√©er des plugins personnalis√©s
        üí° APPRENTISSAGE: Syst√®me de plugins Semantic Kernel
        
        Plugins √† cr√©er:
        1. TimePlugin - Gestion du temps et planning
        2. PreferencePlugin - Pr√©f√©rences utilisateur
        3. MemoryPlugin - Gestion de la m√©moire
        4. TaskPlugin - Gestion des t√¢ches
        
        Concepts cl√©s:
        - @sk_function decorator
        - Plugin registration
        - Function calling
        - Parameter handling
        """
        print("\\nüîå √âTAPE: Cr√©ation de plugins personnalis√©s")
        print("=" * 60)
        
        # TODO: Cr√©er le plugin Time
        # time_plugin = self.plugins.create_time_plugin()
        # self.kernel.import_plugin(time_plugin, "TimePlugin")
        
        # TODO: Cr√©er le plugin Preference
        # preference_plugin = self.plugins.create_preference_plugin()
        # self.kernel.import_plugin(preference_plugin, "PreferencePlugin")
        
        # TODO: Exemple de plugin simple inline
        # @sk_function(
        #     description="Get the current weather for a location",
        #     name="get_weather"
        # )
        # def get_weather(location: str) -> str:
        #     # Simulation - en r√©alit√©, appel √† API m√©t√©o
        #     return f"The weather in {location} is sunny, 22¬∞C"
        
        # TODO: Enregistrer le plugin inline
        # weather_plugin = sk.KernelPlugin.from_object(self, "WeatherPlugin")
        # self.kernel.import_plugin(weather_plugin)
        
        print("‚úÖ TODO 6: Impl√©mentez la cr√©ation de plugins")
        return False
    
    def setup_semantic_memory(self):
        """
        TODO 7: Configurer la m√©moire s√©mantique
        üí° APPRENTISSAGE: M√©moire persistante et recherche s√©mantique
        
        Fonctionnalit√©s m√©moire:
        - Stockage de conversations pass√©es
        - M√©morisation des pr√©f√©rences
        - Recherche s√©mantique d'informations
        - Contexte long-terme
        
        Concepts:
        - Memory stores
        - Semantic search
        - Vector embeddings
        - Memory collections
        """
        print("\\nüß† √âTAPE: Configuration de la m√©moire s√©mantique")
        print("=" * 60)
        
        # TODO: Cr√©er les collections de m√©moire
        # memory_collections = [
        #     "conversations",    # Historique des conversations
        #     "preferences",      # Pr√©f√©rences utilisateur
        #     "knowledge",        # Base de connaissances
        #     "tasks"            # Historique des t√¢ches
        # ]
        
        # TODO: Initialiser les collections
        # for collection in memory_collections:
        #     try:
        #         await self.kernel.memory.create_collection_async(collection)
        #     except Exception:
        #         pass  # Collection existe d√©j√†
        
        # TODO: Charger la m√©moire existante
        # self._load_persistent_memory()
        
        print("‚úÖ TODO 7: Impl√©mentez la configuration de m√©moire")
        return False
    
    def create_automatic_planner(self):
        """
        TODO 8: Cr√©er le planificateur automatique
        üí° APPRENTISSAGE: Planification et orchestration automatique
        
        Capacit√©s du planner:
        - D√©composition automatique de t√¢ches complexes
        - S√©lection de plugins appropri√©s
        - Orchestration multi-√©tapes
        - Adaptation en cas d'erreur
        
        Concepts:
        - BasicPlanner
        - Function calling
        - Plan execution
        - Error handling
        """
        print("\\nüìã √âTAPE: Cr√©ation du planificateur automatique")
        print("=" * 60)
        
        # TODO: Cr√©er le planner
        # self.planner = BasicPlanner()
        
        # TODO: Configurer les capacit√©s de planification
        # planning_config = {
        #     "max_tokens": 1000,
        #     "temperature": 0.3,
        #     "max_iterations": 5
        # }
        
        # TODO: Cr√©er des exemples de plans
        # example_plans = [
        #     "Schedule a meeting for next week",
        #     "Find information about AI trends and save to memory",
        #     "Set user preference for morning reminders",
        #     "Plan a productive day based on user preferences"
        # ]
        
        print("‚úÖ TODO 8: Impl√©mentez le planificateur automatique")
        return False
    
    def implement_conversation_with_memory(self, user_input: str):
        """
        TODO 9: Impl√©menter la conversation avec m√©moire
        üí° APPRENTISSAGE: Int√©gration m√©moire et conversation
        
        Workflow conversationnel:
        1. Analyse de l'entr√©e utilisateur
        2. Recherche dans la m√©moire s√©mantique
        3. Planification automatique si n√©cessaire
        4. Ex√©cution avec plugins
        5. M√©morisation de la conversation
        """
        print(f"\\nüí¨ √âTAPE: Conversation avec m√©moire - '{user_input}'")
        print("=" * 60)
        
        start_time = datetime.now()
        
        try:
            # TODO: Rechercher le contexte dans la m√©moire
            # relevant_memories = await self.kernel.memory.search_async(
            #     "conversations", user_input, limit=3
            # )
            
            # TODO: Construire le prompt avec contexte
            # context_prompt = self._build_context_prompt(user_input, relevant_memories)
            
            # TODO: D√©cider si planification n√©cessaire
            # needs_planning = self._analyze_complexity(user_input)
            
            # if needs_planning:
            #     # Utiliser le planner pour t√¢ches complexes
            #     plan = await self.planner.create_plan_async(user_input, self.kernel)
            #     result = await plan.invoke_async()
            # else:
            #     # R√©ponse directe
            #     response_function = self.kernel.create_semantic_function(
            #         context_prompt,
            #         max_tokens=500,
            #         temperature=0.7
            #     )
            #     result = await response_function.invoke_async(user_input)
            
            execution_time = (datetime.now() - start_time).total_seconds()
            
            # TODO: M√©moriser la conversation
            # await self.kernel.memory.save_information_async(
            #     "conversations",
            #     f"User: {user_input}\\nAssistant: {result}",
            #     f"conversation_{datetime.now().isoformat()}"
            # )
            
            # TODO: Mettre √† jour l'√©tat de l'agent
            # self.agent_state.last_interaction = datetime.now().isoformat()
            # self.conversation_history.append({
            #     "user": user_input,
            #     "assistant": result,
            #     "timestamp": start_time.isoformat(),
            #     "execution_time": execution_time
            # })
            
            print("‚úÖ TODO 9: Impl√©mentez la conversation avec m√©moire")
            return {
                "user_input": user_input,
                "response": "TODO 9: R√©ponse √† impl√©menter",
                "execution_time": execution_time,
                "used_memory": True,
                "used_planning": False,  # √Ä d√©terminer avec vraie logique
                "timestamp": start_time.isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå Erreur durant la conversation: {e}")
            return None
    
    def manage_user_preferences(self, preference_type: str, value: Any):
        """
        TODO 10: G√©rer les pr√©f√©rences utilisateur
        üí° APPRENTISSAGE: Personnalisation et adaptation
        
        Types de pr√©f√©rences:
        - Communication style
        - Notification settings
        - Task priorities
        - Personal information
        """
        print(f"\\n‚öôÔ∏è √âTAPE: Gestion des pr√©f√©rences - {preference_type}")
        print("=" * 60)
        
        # TODO: Valider le type de pr√©f√©rence
        # valid_preferences = [
        #     "communication_style",
        #     "notification_time",
        #     "task_priority",
        #     "personal_info",
        #     "language",
        #     "timezone"
        # ]
        
        # if preference_type not in valid_preferences:
        #     print(f"‚ùå Type de pr√©f√©rence invalide: {preference_type}")
        #     return False
        
        # TODO: Sauvegarder dans la m√©moire s√©mantique
        # await self.kernel.memory.save_information_async(
        #     "preferences",
        #     f"{preference_type}: {value}",
        #     f"pref_{preference_type}"
        # )
        
        # TODO: Mettre √† jour l'√©tat local
        # setattr(self.agent_state, preference_type, value)
        
        print("‚úÖ TODO 10: Impl√©mentez la gestion des pr√©f√©rences")
        return False
    
    def demonstrate_planning_capabilities(self):
        """
        TODO 11: D√©montrer les capacit√©s de planification
        üí° APPRENTISSAGE: Planification complexe et adaptation
        
        Sc√©narios de planification:
        1. Planification de journ√©e productive
        2. Organisation d'un projet
        3. Apprentissage d'un nouveau sujet
        4. R√©solution de probl√®me complexe
        """
        print("\\nüéØ √âTAPE: D√©monstration des capacit√©s de planification")
        print("=" * 60)
        
        demo_scenarios = [
            "Plan me a productive day based on my preferences",
            "Help me organize a project to learn machine learning",
            "Create a strategy to improve my work-life balance",
            "Plan a research approach for AI agent frameworks"
        ]
        
        print("üìã Sc√©narios de planification:")
        for i, scenario in enumerate(demo_scenarios, 1):
            print(f"  {i}. {scenario}")
        
        # TODO: Ex√©cuter les sc√©narios de planification
        # for scenario in demo_scenarios:
        #     print(f"\\nüéØ Sc√©nario: {scenario}")
        #     print("-" * 40)
        #     
        #     # Cr√©er et ex√©cuter le plan
        #     plan = await self.planner.create_plan_async(scenario, self.kernel)
        #     result = await plan.invoke_async()
        #     
        #     print(f"üìù Plan g√©n√©r√©: {plan}")
        #     print(f"‚úÖ R√©sultat: {result}")
        
        print("‚úÖ TODO 11: Impl√©mentez la d√©monstration de planification")
    
    def save_agent_state(self):
        """
        TODO 12: Sauvegarder l'√©tat de l'agent
        üí° APPRENTISSAGE: Persistance et continuit√©
        """
        print("\\nüíæ √âTAPE: Sauvegarde de l'√©tat de l'agent")
        print("=" * 60)
        
        # TODO: Pr√©parer les donn√©es d'√©tat
        # state_data = {
        #     "agent_info": {
        #         "created_at": getattr(self.agent_state, 'created_at', datetime.now().isoformat()),
        #         "last_interaction": getattr(self.agent_state, 'last_interaction', None),
        #         "total_conversations": len(self.conversation_history),
        #         "version": "1.0.0"
        #     },
        #     "preferences": {
        #         # Extraire depuis la m√©moire s√©mantique
        #     },
        #     "conversation_summary": {
        #         "recent_topics": [],  # Analyser depuis l'historique
        #         "user_interests": [],  # D√©duire des conversations
        #         "recurring_tasks": []  # Identifier des patterns
        #     },
        #     "performance_metrics": {
        #         "avg_response_time": 0,  # Calculer depuis l'historique
        #         "successful_plans": 0,   # Compter les plans r√©ussis
        #         "memory_usage": 0        # Estimer l'utilisation m√©moire
        #     }
        # }
        
        # TODO: Sauvegarder dans memory_state.json
        # with open("memory_state.json", "w", encoding="utf-8") as f:
        #     json.dump(state_data, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ TODO 12: Impl√©mentez la sauvegarde d'√©tat")
    
    def run_demo(self):
        """
        TODO 13: Cr√©er une d√©monstration compl√®te
        üí° APPRENTISSAGE: Test end-to-end du syst√®me
        """
        print("\\nüé¨ D√âMONSTRATION DE VOTRE AGENT INTELLIGENT")
        print("=" * 60)
        
        # Interactions de d√©monstration
        demo_interactions = [
            "Hello! I'm new here. Can you introduce yourself?",
            "I prefer formal communication style",
            "What's the weather like today?",
            "Help me plan a productive morning routine",
            "Remember that I'm interested in AI and machine learning"
        ]
        
        print("üí¨ Interactions de d√©monstration:")
        for i, interaction in enumerate(demo_interactions, 1):
            print(f"  {i}. {interaction}")
        
        print("\\nüìã Processus de d√©monstration:")
        print("  1. üîå Cr√©ation des plugins personnalis√©s")
        print("  2. üß† Configuration de la m√©moire s√©mantique")
        print("  3. üìã Cr√©ation du planificateur automatique")
        print("  4. üí¨ Conversations avec m√©moire")
        print("  5. ‚öôÔ∏è Gestion des pr√©f√©rences")
        print("  6. üéØ D√©monstration de planification")
        print("  7. üíæ Sauvegarde de l'√©tat")
        
        # TODO: Ex√©cuter la d√©monstration compl√®te
        # print("\\n‚ö° Lancement de la d√©monstration...")
        
        # if self.create_custom_plugins():
        #     if self.setup_semantic_memory():
        #         if self.create_automatic_planner():
        #             # Ex√©cuter les interactions
        #             for interaction in demo_interactions:
        #                 result = self.implement_conversation_with_memory(interaction)
        #                 if result:
        #                     print(f"üí¨ {interaction}")
        #                     print(f"ü§ñ {result['response']}")
        #                     print()
        #             
        #             self.demonstrate_planning_capabilities()
        #             self.save_agent_state()
        #             print("\\nüèÜ D√©monstration termin√©e avec succ√®s!")
        #             print("üíæ Consultez memory_state.json pour l'√©tat de l'agent")
        #         else:
        #             print("‚ùå √âchec de la cr√©ation du planner")
        #     else:
        #         print("‚ùå √âchec de la configuration m√©moire")
        # else:
        #     print("‚ùå √âchec de la cr√©ation des plugins")
        
        print("\\n‚úÖ TODO 13: Impl√©mentez la d√©monstration compl√®te")
    
    def _build_context_prompt(self, user_input: str, memories: List) -> str:
        """Construire un prompt avec contexte m√©moire"""
        # TODO: Impl√©menter la construction de prompt
        return f"Context: {memories}\\nUser: {user_input}\\nAssistant:"
    
    def _analyze_complexity(self, user_input: str) -> bool:
        """Analyser si la requ√™te n√©cessite planification"""
        # TODO: Impl√©menter l'analyse de complexit√©
        complex_keywords = ["plan", "organize", "strategy", "help me", "how to"]
        return any(keyword in user_input.lower() for keyword in complex_keywords)
    
    def _load_persistent_memory(self):
        """Charger la m√©moire persistante"""
        # TODO: Impl√©menter le chargement de m√©moire
        pass

def main():
    """
    üéØ FONCTION PRINCIPALE - VOTRE PARCOURS D'APPRENTISSAGE
    
    Suivez cette progression pour ma√Ætriser Semantic Kernel:
    """
    print("üöÄ BIENVENUE DANS VOTRE PROJET INTELLIGENT AGENT !")
    print("=" * 60)
    print("üìö Vous allez apprendre en construisant un assistant intelligent")
    print("üéØ Objectif: Agent avec planification et m√©moire long-terme")
    print("‚è±Ô∏è Temps estim√©: 15 minutes")
    print("\\nüìã PROGRESSION:")
    print("  1. ‚úÖ Configuration de base")
    print("  2. üîå Plugins personnalis√©s")
    print("  3. üß† M√©moire s√©mantique")
    print("  4. üìã Planification automatique")
    print("  5. üí¨ Conversation intelligente")
    print("  6. ‚öôÔ∏è Pr√©f√©rences utilisateur")
    print("  7. üéØ D√©monstration planification")
    print("  8. üíæ Persistance √©tat")
    
    try:
        # Initialiser l'agent
        agent_system = IntelligentAgentSystem()
        
        # Message d'encouragement
        print("\\nüéì PR√äT √Ä COMMENCER ?")
        print("üëÜ Suivez les TODO dans le code pour apprendre !")
        print("üí° Chaque TODO vous enseigne un concept important de Semantic Kernel")
        
        # TODO: D√©commenter quand vous avez impl√©ment√© les m√©thodes
        # agent_system.run_demo()
        
        print("\\nüèÜ Quand vous aurez termin√© tous les TODO:")
        print("   - Vous ma√Ætriserez Semantic Kernel")
        print("   - Vous aurez un assistant personnel intelligent")
        print("   - Vous comprendrez la planification automatique")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        print("üí° V√©rifiez votre configuration (cl√© API, d√©pendances)")

if __name__ == "__main__":
    main()